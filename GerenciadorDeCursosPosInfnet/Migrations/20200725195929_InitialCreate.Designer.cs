// <auto-generated />
using System;
using Cursos.Infra.Data.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cursos.Presentation.API.Migrations
{
    [DbContext(typeof(CursosDbContext))]
    [Migration("20200725195929_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cursos.Domain.Entities.Curso", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<Guid>("DepartamentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("Cursos.Domain.Entities.Departamento", b =>
                {
                    b.Property<Guid>("DepartamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstituicaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartamentoId");

                    b.HasIndex("InstituicaoId");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("Cursos.Domain.Entities.DetalhamentoCurso", b =>
                {
                    b.Property<Guid>("DisciplinaCursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CursoDisciplinaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DisciplinaCursoId", "CursoDisciplinaId");

                    b.HasIndex("CursoDisciplinaId");

                    b.ToTable("DetalhamentoCurso");
                });

            modelBuilder.Entity("Cursos.Domain.Entities.Disciplina", b =>
                {
                    b.Property<Guid>("DisciplinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisciplinaId");

                    b.ToTable("Disciplina");
                });

            modelBuilder.Entity("Cursos.Domain.Entities.Endereco", b =>
                {
                    b.Property<Guid>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstituicaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rua")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnderecoId");

                    b.HasIndex("InstituicaoId")
                        .IsUnique();

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("Cursos.Domain.Entities.Instituicao", b =>
                {
                    b.Property<Guid>("InstituicaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstituicaoId");

                    b.ToTable("Instituicao");
                });

            modelBuilder.Entity("Cursos.Domain.Entities.Curso", b =>
                {
                    b.HasOne("Cursos.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Cursos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cursos.Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Cursos.Domain.Entities.Instituicao", "Instituicao")
                        .WithMany("Departamentos")
                        .HasForeignKey("InstituicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cursos.Domain.Entities.DetalhamentoCurso", b =>
                {
                    b.HasOne("Cursos.Domain.Entities.Curso", "CursoDisciplina")
                        .WithMany("Disciplina")
                        .HasForeignKey("CursoDisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cursos.Domain.Entities.Disciplina", "DisciplinaCurso")
                        .WithMany("Cursos")
                        .HasForeignKey("DisciplinaCursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cursos.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Cursos.Domain.Entities.Instituicao", "Instituicao")
                        .WithOne("Endereco")
                        .HasForeignKey("Cursos.Domain.Entities.Endereco", "InstituicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
